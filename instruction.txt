Following the below-mentioned steps will help you to easily configure the Odoo platform with Nginx as Reverse Proxy




install odoo 16 instance on port 8069
add systemd unit to add odoo as linux service and enable it to automatic start service on system startup
install nginx on system
enable enginx to automatic startup :sudo systemctl enable nginx
start service with : sudo service nginx start, check service status with sudo service nginx status


- Although this step is optional, it is a good security practice. Moreover, by default Odoo server listens to port 8069 on all interfaces, so if you want to disable the direct access to your Odoo instance,  open the Odoo configuration and add the following two lines of command at the end of the file:

/etc/odoo.conf

xmlrpc_interface = 127.0.0.1
netrpc_interface = 127.0.0.1
- Now save the configuration file and restart the Odoo server for the changes to take effect using the following code:

systemctl restart odoo


As the NGINX is installed and the binding interface is changed let's now move on to configuring it in the next section.

## Configure NGINX

- Initially edit the current Nginx server block in the old domain or create a new server block if it is not created yet.

### do one of below option:

- Now add the following lines of code to configure NGINX:

#### option1:

cd /etc/nginx/sites-enabled

Create a Nginx Server Block for your Domain:
nano /etc/nginx/sites-available/thisdomain.com



server {
    server_name testing.com 111.111.111.111;
    listen 80;
    access_log /var/log/nginx/testing-access.log;
    error_log /var/log/nginx/testing-error.log;
    location /longpolling {
        proxy_connect_timeout   3600;
        proxy_read_timeout      3600;
        proxy_send_timeout      3600;
        send_timeout            3600;
        proxy_pass http://127.0.0.1:8072;
}
    location / {
        proxy_connect_timeout   3600;
        proxy_read_timeout      3600;
        proxy_send_timeout      3600;
        send_timeout            3600;
        proxy_pass http://127.0.0.1:8069/;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    gzip on;
    gzip_min_length 1000;
}
upstream odoo {
server 127.0.0.1:8069 weight=1 fail_timeout=0;
}
upstream odoo-im {
server 127.0.0.1:8072 weight=1 fail_timeout=0;
}



#### option2:
nano /etc/nginx/sites-available/thisdomain.com

This command will open up the configuration file. Enter the configuration information as below.

upstream odoo {
   server 127.0.0.1:8069;
}

server {
   listen 80 default;
   server_name thisdomain.com;

   access_log /var/log/nginx/odoo.com.access.log;
   error_log /var/log/nginx/odoo.com.error.log;

   proxy_buffers 16 64k;
   proxy_buffer_size 128k;

   location / {
      proxy_pass http://odoo;
      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
      proxy_redirect off;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;
   }

   location ~* /web/static/ {
      proxy_cache_valid 200 60m;
      proxy_buffering on;
      expires 864000;
      proxy_pass http://odoo;
   }
}
Save the file and exit the editor.

Step 5: Restart the Nginx Web Server
Restart the web server for the changes you've made above to take effect. Use the following command to restart Nginx.

sudo systemctl restart nginx
Congratulations! You can now be able to access your Odoo instance by typing your domain and in the web browser. This example works with the following address.

http://thisdomain.com






systemctl restart odoo
service nginx restart





